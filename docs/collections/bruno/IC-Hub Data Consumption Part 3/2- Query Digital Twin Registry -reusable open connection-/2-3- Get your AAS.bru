meta {
  name: 2-3- Get your AAS
  type: http
  seq: 4
}

get {
  url: {{provider-connector-dataplane-proxy}}/shell-descriptors/{{encoded_aas_id}}
  body: json
  auth: none
}

params:query {
  ~Authorization: {{jwtToken}}
}

headers {
  Authorization: {{jwtToken}}
}

tests {
  let jsonData = res.getBody();
  
  // 1. Extract manufacturerId
  if (jsonData.specificAssetIds) {
      let manufacturerId = jsonData.specificAssetIds.find(asset => asset.name === "manufacturerId")?.value;
      if (manufacturerId) {
          bru.setEnvVar("manufacturer_id", manufacturerId);
          console.log("Manufacturer ID:", manufacturerId);
      }
  }
  
  // 2. Extract subprotocolBody string
  let subprotocolBody = jsonData.submodelDescriptors?.[0]?.endpoints?.[0]?.protocolInformation?.subprotocolBody;
  if (subprotocolBody) {
      // Extract `id` and `dspEndpoint` using regex
      let idMatch = subprotocolBody.match(/id=([^;]+)/);
      let dspMatch = subprotocolBody.match(/dspEndpoint=(.+)$/);
  
      if (idMatch && idMatch[1]) {
          bru.setEnvVar("subprotocol_body_id", idMatch[1]);
          console.log("Subprotocol Body ID:", idMatch[1]);
      }
  
      if (dspMatch && dspMatch[1]) {
          bru.setEnvVar("dsp_endpoint", dspMatch[1]);
          console.log("DSP Endpoint:", dspMatch[1]);
      }
  }
  
  let href = jsonData.submodelDescriptors?.[0]?.endpoints?.[0]?.protocolInformation?.href;
  if (href) {
       bru.setEnvVar("href", href);
  }
}
